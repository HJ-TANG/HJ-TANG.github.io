<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo和GitHub搭建个人博客记录</title>
    <url>/2020/06/21/Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>心血来潮想搭建一个个人博客，但是又不想买域名买服务器，就在网上找了个简单的Hexo+GitHub的建站教程，没想到这么简单的教程我也能踩坑。下面大概记录一下安装流程以及安装过程中踩到的坑。</p>
<a id="more"></a>

<h1 id="安装基本流程"><a href="#安装基本流程" class="headerlink" title="安装基本流程"></a>安装基本流程</h1><p>安装主要是按照<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">这个教程</a>进行的（忽略个人网站域名相关部分）。主要步骤就以下几个：</p>
<ul>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js（强烈推荐使用nvm安装稳定版本）</li>
<li>安装Hexo</li>
<li>推送网站</li>
</ul>
<p>其中在安装node.js时，默认安装了当前的最新版本14.0.0（这是个大坑）。</p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="部署不上GitHub"><a href="#部署不上GitHub" class="headerlink" title="部署不上GitHub"></a>部署不上GitHub</h2><p>按上面的流程操作完之后，本地能预览，但是部署不到GitHub上去。看了下md文档是在的，但是渲染出来的html文件都是空的（那为什么本地博客显示正常？？？）。。</p>
<p>网上搜索一番，首先尝试重启大法，即重新安装node.js和hexo等，没用。</p>
<p>然后尝试了更改<code>_config.yml</code>里面的<code>deploy</code>下<code>repo</code>的格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repo: https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repo: git@github.com:yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure>

<p>也没有用。</p>
<p>最后折腾了半天之后，终于在一个博客上看到可能是node.js的版本问题，这样又来到了第二个大坑。</p>
<h2 id="nvm和node-js安装"><a href="#nvm和node-js安装" class="headerlink" title="nvm和node.js安装"></a>nvm和node.js安装</h2><p>由于使用的macOS，之前安装node.js是直接用brew安装的，默认安装的是最新版node。在某博客中看到最好不要使用brew安装node.js，而是采用nvm安装，使用nvm可以进行node.js的版本管理，可以随时切换node版本。nvm及node安装教程可以看<a href="https://www.jianshu.com/p/c1b6c452a98a" target="_blank" rel="noopener">这篇</a>，mac下更详细的教程可以看<a href="https://segmentfault.com/a/1190000017391932" target="_blank" rel="noopener">这里</a>和<a href="https://www.jianshu.com/p/622ad36ee020" target="_blank" rel="noopener">这里</a>，以及别人<a href="https://blog.csdn.net/zjuwwj/article/details/72805671" target="_blank" rel="noopener">踩过的坑</a>。还有一篇<a href="http://linyehui.me/2016/03/03/reinstall-nodejs-on-osx/" target="_blank" rel="noopener">Mac OSX下重装node.js</a>供参考。</p>
<p>我安装nvm也碰到了路径问题，就是明明已经安装了nvm，但是用的时候却显示<code>command not found</code>。参考前面的几个博客，以及一顿google又折腾了半天安装好了nvm，然后安装了<strong>官方推荐稳定版本</strong>v12.6.0，然后再安装hexo，部署GitHub，问题完美解决。</p>
<p>但是重启终端后又说找不到nvm了！于是又有了<a href="https://blog.csdn.net/mrhaoxiaojun/article/details/79312101" target="_blank" rel="noopener">nvm 重启终端失效的解决方法</a>。</p>
<p>总结一下，血的教训就是安装软件或者包啥的一定要安装<strong>官方稳定版</strong>！</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>还有很多别的常踩的坑可以参考<a href="https://xuanwo.io/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">Hexo常见问题解决方案</a>。</p>
]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo简单使用教程</title>
    <url>/2020/06/21/Hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>上一篇文章里用GitHub和Hexo搭建了一个粗糙的个人博客，这篇文章讲一下基本的使用和美化。如新建、删除博文，更换主题，添加标签分类等等。</p>
<h1 id="新建、删除文章"><a href="#新建、删除文章" class="headerlink" title="新建、删除文章"></a>新建、删除文章</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>在blog文件夹下新建终端窗口，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure>

<p>一篇空白的文章就新建好啦。文件是.md格式的，写文章的话需要学习一点markdown语法。</p>
<p>文件的开头是这样的：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 测试页面</span><br><span class="line">date: 2020-06-20 19:03:08</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>其他</span><br></pre></td></tr></table></figure>

<p><code>title</code>是最终显示出来的文章标题，<code>date</code>是文章的创建时间，<code>tags</code>是文章的标签，在后面会详细说明。</p>
<p>编辑好文章，想要本地预览可以依次执行<code>hexo g</code>和<code>hexo s</code>，如果没什么问题<code>hexo d</code>就可以部署到GitHub啦。</p>
<h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><p>首先进入到source / _post 文件夹中，找到要删除的文章对应的文件如helloworld.md文件，在本地直接执行删除。然后在blog文件夹中重新执行<code>hexo g</code>就好啦，然后<code>hexo d</code>部署到GitHub。</p>
<a id="more"></a>



<h1 id="新建、发布草稿"><a href="#新建、发布草稿" class="headerlink" title="新建、发布草稿"></a>新建、发布草稿</h1><h2 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h2><p>跟新建文章类似，不过多个<code>draft</code>关键字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new draft 标题</span><br></pre></td></tr></table></figure>

<p>生成的文件会在<code>source/_draft</code>下。本地查看的时候草稿是不会显示的，可以执行<code>hexo server --draft</code>来强行在本地预览草稿。</p>
<h2 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo publish post 标题</span><br></pre></td></tr></table></figure>



<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>默认的主题不喜欢，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a>上找一个自己喜欢的主题。我使用的是<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next主题</a>，浓浓的程序员风格。</p>
<p>首先下载这个主题：打开命令行，进入<strong>blog所在的目录</strong>，然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为<code>next</code>（默认为<code>landscape</code>）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>打开<strong>主题</strong>的_config.yml配置文件，在文件夹 themes / next 下面，不是站点配置文件，找到<code>Scheme Settings</code>，里面有四种样式，可以选择你喜欢的一种取消注释就行了。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>



<h1 id="添加分类及标签"><a href="#添加分类及标签" class="headerlink" title="添加分类及标签"></a>添加分类及标签</h1><p>首先参考这篇文章<a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener">Hexo使用攻略-添加分类及标签</a>，这样操作之后我们的文章已经有了分类和标签，但是要想分类和标签在左侧的菜单栏中像下图一样出现，需要在<strong>主题</strong>的配置文件_config.yml（themes / 主题名字）下面中找到<code>Menu Settings</code> ，把 <code>categories</code> 和 <code>tags</code> 取消注释。</p>
<img src="menu.png" width="30%" height="30%">

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>




<h1 id="阅读全文"><a href="#阅读全文" class="headerlink" title="阅读全文"></a>阅读全文</h1><p>默认情况下首页会显示最近发布的文章的全部内容，有点难看。如果不喜欢可以使用<strong>阅读全文</strong>功能，让首页只显示文章的一部分，折叠掉文章主体。</p>
<p>添加方法极其简单，只要在文章里需要折叠的段落前加上<code>&lt;!-- more --&gt;</code> 就好啦！</p>
<p>效果：</p>
<img src="/images/image-20200620221512311.png" alt="image1" width="90%" height="90%" />



<h1 id="其他主题配置"><a href="#其他主题配置" class="headerlink" title="其他主题配置"></a>其他主题配置</h1><p>可以查看<a href="https://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">官方文档</a>。</p>
]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Next主题下集成gitalk评论系统</title>
    <url>/2020/06/21/Hexo%E7%9A%84Next%E4%B8%BB%E9%A2%98%E4%B8%8B%E9%9B%86%E6%88%90gitalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>博客建好了当然要增加评论模块（万一有人想评论呢）。</p>
<p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>是基于 GitHub Issues 的评论系统。评论系统那么多，为什么用它呢？因为它简单方便呀，直接在GitHub里就可以申请应用许可～</p>
<p>下面是具体步骤。</p>
<a id="more"></a>



<h1 id="注册-OAuth-Application"><a href="#注册-OAuth-Application" class="headerlink" title="注册 OAuth Application"></a>注册 OAuth Application</h1><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击此处</a> 来注册一个新的 OAuth Application。或者点击GitHub右上角个人头像 -&gt; Settings -&gt; 左侧最下的Developer Settings -&gt; OAuth Apps -&gt; New OAuth App。Application name可以随便填，Homepage URL和callback URL最好都填你的博客域名，如我的填的就是<code>https://hj-tang.github.io</code>。<strong>注意！域名后面不要有斜杠 / ！！</strong></p>
<img src="app.png" width="60%" height="60%">

<p>点击注册后，会得到<code>Client ID</code>和<code>Client Secret</code>，这个在后面的配置中会用到。</p>
<h1 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h1><p>修改next主题下的配置文件<code>next/_config.yml</code>，找到以下部分并按照下面所示修改：</p>
<p>第一部分：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Comments Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/third-party-services/comments</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">tabs</span></span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">gitalk</span></span><br><span class="line">  <span class="comment"># Setting `true` means remembering the comment system selected by the visitor.</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Lazyload all comment systems.</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>第二部分：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">githubID:</span> <span class="string">github帐号</span>  <span class="comment"># 例如：hj-tang 注意是ID不是name  </span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">用于存放评论的仓库名称</span>  <span class="comment"># 可以填写博客所在的repo如hj-tang.github.io，或者建一个新的用于存放评论如store_comments </span></span><br><span class="line">  <span class="attr">ClientID:</span> <span class="string">Client</span> <span class="string">ID</span> <span class="comment"># 前面注册OAuth App时生成的</span></span><br><span class="line">  <span class="attr">ClientSecret:</span> <span class="string">Client</span> <span class="string">Secret</span> <span class="comment"># 前面注册OAuth App时生成的</span></span><br><span class="line">  <span class="attr">adminUser:</span> <span class="string">github帐号</span> <span class="comment">#指定可初始化评论账户 例如：hj-tang</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h1><h2 id="Related-Issues-Not-Found-问题"><a href="#Related-Issues-Not-Found-问题" class="headerlink" title="Related Issues Not Found 问题"></a>Related Issues Not Found 问题</h2><p>完成上一步之后我们预览博客会发现文章下面有评论区，但是可能会报如下错 </p>
<blockquote>
<p>Related Issues not found. Please contact @XXXX to initialize the comment.</p>
</blockquote>
<p>不过没关系，只要我们点击 “Login with Github” 登陆一次就行了。检查下其他文章，有可能每个页面都需要登陆一次。</p>
<h2 id="某些页面不希望有评论区"><a href="#某些页面不希望有评论区" class="headerlink" title="某些页面不希望有评论区"></a>某些页面不希望有评论区</h2><p>点击分类或标签进入到相应页面时，会发现也有评论区，这是我们不想看到的。<a href="https://hj-tang.github.io/2020/06/21/Hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#more" target="_blank" rel="noopener">这篇文章</a>里的第4部分介绍了如何添加标签及分类。只要在相应的页面如tags的index.md页面添加<code>comments: false</code>就行了。如下所示：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2020-06-20 18:57:36</span><br><span class="line">type: "tags"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<h2 id="其他可能问题"><a href="#其他可能问题" class="headerlink" title="其他可能问题"></a>其他可能问题</h2><p>可以参考 <a href="https://liujunzhou.top/2018/8/10/gitalk-error/" target="_blank" rel="noopener">Junzhou Liu的博客</a>。</p>
]]></content>
      <categories>
        <category>博客相关</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之tmux快速入门</title>
    <url>/2020/07/03/Linux%E4%B9%8Btmux%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Tmux 可以让你在一个屏幕中管理多个终端窗口。比如像下面这样，左边写代码，右边查看某程序运行情况。接下来就讲讲tmux快速入门指南。</p>
<img src="https://s1.ax1x.com/2020/07/03/NLLX4O.png" alt="NLLX4O.png" width="70%" height="70%" />

<a id="more"></a>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>tmux中有3种概念，会话，窗口(window)，窗格(pane)。一个会话可以包含多个窗口，一个窗口可以被分割成多个窗格(pane)。会话有点像是tmux的服务，在后端运行，我们可以通过tmux命令创建这种服务，并且可以通过tmux命令查看，附加到后端运行的会话中。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/330-799c58a003588e02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/693" alt="tmux架构"></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>tmux 是被设计为 cs 结构的。因此当你启动 tmux 的时候, 实际上你启动的是 tmux 的 client。<br>服务端可能也在你的电脑上或者其他服务器上，总之要连接 client 和 server， 就需要一个 session。一般来说一个 session 对应一个 project。</p>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><p>一个 session 包含多个 window，这里的 window 比较类似一般 terminal 模拟器的 tab。</p>
<h2 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h2><p>一个 window 可以被分割为多个 pane，方便同时查看多个进程的状态。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="会话操作"><a href="#会话操作" class="headerlink" title="会话操作"></a>会话操作</h2><ol>
<li><p>新建会话</p>
<p><code>tmux new -s [会话名]</code> </p>
<p>新建一个会话(session)后，在会话中会生成一个默认窗口(window)，默认窗口中有一个默认窗格(pane)铺满整个窗口区域。</p>
</li>
<li><p>退出会话</p>
<p><code>ctrl+b d</code> （ 即先同时按下ctrl和b，松开再按d）</p>
</li>
<li><p>查看会话列表</p>
<p><code>tmux ls</code></p>
<p>如果是在某个会话环境中想查看会话列表，可以用以下指令来获得，然后用键盘选择就可进入</p>
<p><code>ctrl+b s</code></p>
</li>
<li><p>进入会话</p>
<p><code>tmux a -t [会话名]</code></p>
</li>
<li><p>销毁会话</p>
<p><code>tmux kill-session -t [会话名]</code></p>
</li>
<li><p>重命名会话</p>
<p><code>tmux rename -t [旧会话名] [新会话名]</code></p>
</li>
</ol>
<h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><p>一个tmux的会话中可以有多个窗口(window)，每个窗口又可以分割成多个pane(窗格)。我们工作的最小单位其实是窗格。默认情况下在一个window中，只有一个大窗格，占满整个窗口区域。我们在这个区域工作。</p>
<ol>
<li><p>新建窗口</p>
<p><code>ctrl+b c</code></p>
<p>默认情况下创建出来的窗口由窗口序号+窗口名字组成，可以看到新创建的窗口后面有*号，表示是当前窗口。</p>
</li>
<li><p>切换窗口</p>
<p>在同一个会话的多个窗口之间可以通过如下快捷键进行切换：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl+b p (previous的首字母) 切换到上一个window。</span><br><span class="line">ctrl+b n (next的首字母) 切换到下一个window。</span><br><span class="line">ctrl+b 0 切换到0号window，依次类推，可换成任意窗口序号</span><br><span class="line">ctrl+b w (windows的首字母) 列出当前session所有window，通过上、下键切换窗口</span><br><span class="line">ctrl+b l (字母L的小写)相邻的window切换</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>关闭窗口</p>
<p><code>ctrl+b &amp;</code></p>
</li>
</ol>
<h2 id="窗格操作"><a href="#窗格操作" class="headerlink" title="窗格操作"></a>窗格操作</h2><p>tmux的一个窗口可以被分成多个pane(窗格)，可以做出分屏的效果。</p>
<ol>
<li><p>垂直分屏</p>
<p><code>ctrl+b %</code></p>
</li>
<li><p>水平分屏</p>
<p><code>ctrl+b &quot;</code></p>
</li>
<li><p>切换窗格</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl+b o 依次切换当前窗口下的各个pane。</span><br><span class="line">ctrl+b Up|Down|Left|Right 根据按箭方向选择切换到某个pane。</span><br><span class="line">ctrl+b Space (空格键) 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式。</span><br><span class="line">ctrl+b z 最大化当前pane。再按一次后恢复。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>关闭窗格</p>
<p><code>ctrl+b x</code> 关闭当前使用中的pane，操作之后会给出是否关闭的提示，按y确认即关闭。</p>
</li>
</ol>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>tmux的配置文件是<code>~/.tmux.conf</code>，这个文件可能不存在，可以自己新建。配置文件可以用来更改默认的操作方式，设置为你喜欢的键位。</p>
<p>示例文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g prefix C-x <span class="comment"># prefix C-x</span></span><br><span class="line">unbind C-b <span class="comment"># C-b即Ctrl-b键，unbind意味着解除绑定</span></span><br><span class="line"><span class="built_in">bind</span> C-x send-prefix <span class="comment"># 绑定Ctrl+x为新的指令前缀</span></span><br><span class="line"><span class="comment"># 从tmux v1.6版起，支持设置第二个指令前缀</span></span><br><span class="line"><span class="built_in">set</span>-option -g prefix2 ` <span class="comment"># 设置一个不常用的`键作为指令前缀，按键更快</span></span><br><span class="line"><span class="comment"># 绑定快捷键r</span></span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display-message <span class="string">"Config reloaded"</span></span><br><span class="line">unbind <span class="string">'"'</span></span><br><span class="line"><span class="built_in">bind</span> - splitw -v <span class="comment"># 垂直方向新增面板，默认进入当前目录</span></span><br><span class="line">unbind <span class="string">'%'</span></span><br><span class="line"><span class="built_in">bind</span> | splitw -h <span class="comment"># 水平方向新增面板，默认进入当前目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> -r k select-pane -U <span class="comment"># 绑定prefix+k为↑</span></span><br><span class="line"><span class="built_in">bind</span> -r j select-pane -D <span class="comment"># 绑定j为↓</span></span><br><span class="line"><span class="built_in">bind</span> -r h select-pane -L <span class="comment"># 绑定h为←</span></span><br><span class="line"><span class="built_in">bind</span> -r l select-pane -R <span class="comment"># 绑定l为→</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> -r e lastp <span class="comment"># 选择最后一个面板</span></span><br><span class="line"><span class="built_in">bind</span> -r ^e last <span class="comment"># 选择最后一个窗口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> -r ^u swapp -U <span class="comment"># 与前一个面板交换位置</span></span><br><span class="line"><span class="built_in">bind</span> -r ^d swapp -D <span class="comment"># 与后一个面板交换位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定prefix Ctrl+hjkl键为面板上下左右调整边缘的快捷指令</span></span><br><span class="line"><span class="built_in">bind</span> -r ^k resizep -U 10 <span class="comment"># 绑定Ctrl+k为往↑调整面板边缘10个单元格</span></span><br><span class="line"><span class="built_in">bind</span> -r ^j resizep -D 10 <span class="comment"># 绑定Ctrl+j为往↓调整面板边缘10个单元格</span></span><br><span class="line"><span class="built_in">bind</span> -r ^h resizep -L 10 <span class="comment"># 绑定Ctrl+h为往←调整面板边缘10个单元格</span></span><br><span class="line"><span class="built_in">bind</span> -r ^l resizep -R 10 <span class="comment"># 绑定Ctrl+l为往→调整面板边缘10个单元格</span></span><br><span class="line"></span><br><span class="line">setw -g mode-keys vi <span class="comment"># vi风格选择文本</span></span><br><span class="line"><span class="comment"># bind escape copy-mode  # 绑定esc为进入复制模式</span></span><br><span class="line"><span class="built_in">bind</span> -t vi-copy v begin-selection <span class="comment"># 绑定v键为开始选择文本</span></span><br><span class="line"><span class="built_in">bind</span> -t vi-copy y copy-selection <span class="comment"># 绑定y键为复制选中文本</span></span><br><span class="line"><span class="built_in">bind</span> p pasteb <span class="comment"># 绑定p键为粘贴文本（p键默认用于进入上一个窗口，不建议覆盖）</span></span><br></pre></td></tr></table></figure>



<p>以上是tmux的快速入门，即最常用到的tmux功能及快捷方式，更全的指令以及更详细的介绍可以参考<a href="https://www.cnblogs.com/lizhang4/p/7325086.html" target="_blank" rel="noopener">tmux常用命令</a>和<a href="https://www.cnblogs.com/wangqiguo/p/8905081.html" target="_blank" rel="noopener">tmux终端复用详解</a>。</p>
<p>参考：<a href="https://blog.csdn.net/zong596568821xp/article/details/83785387" target="_blank" rel="noopener">https://blog.csdn.net/zong596568821xp/article/details/83785387</a> </p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
